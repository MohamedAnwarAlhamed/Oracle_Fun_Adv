CREATE OR REPLACE PROCEDURE ADD_HR_TABLE ( P_ID NUMBER, P_NAME VARCHAR2)
    AUTHID CURRENT_USER 
    IS
BEGIN
    INSERT INTO HR_TABLE VALUES ( P_ID, P_NAME);
END;
 --==============================================
CREATE OR REPLACE PROCEDURE CHILD_BLOCK 
IS
BEGIN
    INSERT INTO T( TEST_VALUE)
    VALUES ('Child block insert');
    COMMIT;
END CHILD_BLOCK;

CREATE OR REPLACE PROCEDURE PARENT_BLOCK 
IS
BEGIN
    INSERT INTO T ( TEST_VALUE) 
    VALUES ('Parent block insert');
    CHILD BLOCK;
    ROLLBACK;
END PARENT_BLOCK;
 --==============================================
CREATE OR REPLACE PROCEDURE CHILD_BLOCK 
IS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO T( TEST VALUE) 
    VALUES ('Child block insert');
    COMMIT;
END CHILD_BLOCK;
 --==============================================
CREATE OR REPLACE PROCEDURE PASS_BY_REF ( P_ID NUMBER ) --p_id called formal parameter
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE (P_ID);
END;

EXECUTE PASS_BY_REF (10);
 --==============================================
CREATE OR REPLACE PROCEDURE PASS_BY_VALUE2 ( PID IN OUT NOCOPY NUMBER )
IS
BEGIN
    P_ID:=P_ID*10;
    IF P_ID>100 THEN
        RAISE VALUE_ERROR;
    END IF;
END;

DECLARE
    V NUMBER:=20;
BEGIN
    PASS_BY_VALUE2 (V);
    DBMS_OUTPUT.PUT_LINE('NO ISSUE '|| V);
EXCEPTION
    WHEN OTHERS THEN
        DBMS OUTPUT.PUT LINE ('EXCEPTION' ||V);
END;
 --==============================================
CREATE OR REPLACE PROCEDURE PASS_BY_VALUE3 ( P_ID IN OUT NOCOPY NUMBER )
IS
BEGIN
    P_ID:=P_ID*10;
    IF P_ID>100 THEN
        RAISE VALUE_ERROR;
    END IF;
END;

DECLARE
    V NUMBER (10):20; --if the actual has size (FOR NUMBER ONLY), nocopy not working
BEGIN
    PASS_BY_VALUE3(V);
    DBMS_OUTPUT.PUT_LINE('NO ISSUE '|| V);
EXCEPTION
    WHEN OTHERS THEN
        DBMS OUTPUT.PUT_LINE ('EXCEPTION' ||V);
END;
 --==============================================
CREATE OR REPLACE PROCEDURE PASS_BY_VALUE4 ( P_ID IN OUT NOCOPY NUMBER ) 
IS
BEGIN
    P_ID:=P_ID*10;
    IF P_ID>100 THEN
        RAISE VALUE_ERROR;
    END IF;
END;

DECLARE
    V NUMBER NOT NULL :=20; --if the actual NOT NULL, nocopy not working
BEGIN
    PASS_BY_VALUE_4 (V);
    DBMS_OUTPUT.PUT_LINE('NO ISSUE ' ||V);
EXCEPTION
    WHEN OTHERS THEN
        DBMS OUTPUT.PUT_LINE ('EXCEPTION' ||V);
END;
 --==============================================
CREATE OR REPLACE PROCEDURE PASS_BY_VALUE5 ( P_ID IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
    P_ID:=P_ID*10;
    IF P_ID>100 THEN
        RAISE VALUE_ERROR;
    END IF;
END;

DECLARE
    V NUMBER:=20; --if the actual NEED IMPLICIT CONV, nocopy not working
BEGIN
    PASS_BY_VALUE5(V);
    DBMS_OUTPUT.PUT_LINE('NO ISSUE ' ||V);
EXCEPTION
    WHEN OTHERS THEN
        DBMS OUTPUT.PUT LINE ('EXCEPTION ' || V);
END;
 --==============================================
CREATE OR REPLACE FUNCTION GET_SUM_SAL_DEPT ( DEPT_ID NUMBER ) RETURN NUMBER RESULT_CACHE 
IS
    V_SAL NUMBER;
BEGIN
    SELECT  SUM(SALARY) INTO V SAL
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID=DEPT_ID;
    RETURN V_SAL;
END;
 --==============================================
CREATE OR REPLACE FUNCTION GET_SUM_SAL_DEPT ( DEPT_ID NUMBER ) RETURN NUMBER RESULT_CACHE RELIES_ON (EMPLOYEES) 
IS
    V_SAL NUMBER;
BEGIN
    SELECT SUM(SALARY) INTO V SAL
    FROM EMPLOYEES
    WHERE DEPARTMENT_ID=DEPT_ID;
    RETURN V_SAL;
END;
 --==============================================
CREATE OR REPLACE PROCEDURE UPDATE_SAL_WITHBULK ( P_AMOUNT NUMBER ) 
IS
    TYPE EMP_TABLE_TYPE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    EMP_TABLE EMP_TABLE_TYPE;
BEGIN
    EMP_TABLE (1):=100;
    EMP_TABLE (2):=101;
    EMP_TABLE (3):=102;
    FORALL I IN EMP_TABLE.FIRST..EMP_TABLE.LAST
        UPDATE EMPLOYEES
        SET SALARY=SALARY+P_AMOUNT
        WHERE EMPLOYEE_ID =EMP_TABLE(I);
    COMMIT;
END;

EXECUTE UPDATE_SAL_WITHBULK (10);
 --==============================================
DECLARE
    TYPE ENAME_T TIS TABLE OF VARCHAR2(100);
    ENAME_TABLE ENAME_T:=ENAME_T();
    C NUMBER:=0;
BEGIN
    FOR I IN (
        SELECT *
        FROM ENAME
    ) LOOP
        C:=C+1;
        ENAME_TABLE.EXTEND;
        ENAME_TABLE (C):=I.FIRST_NAME;
    END LOOP;

    FORALL I IN ENAME_TABLE.FIRST.. ENAME_TABLE.LAST
        SAVE EXCEPTIONS
        UPDATE ENAME
        SET FIRST_NAME=FIRST_NAMELL || 'to be added:') --14 char
        WHERE
            FIRST_NAME=ENAME_TABLE(I));
EXCEPTION
    WHEN OTHERS THEN
        NULL;
END;
 --==============================================
DECLARE
    TYPE ENAME T IS
        TABLE OF VARCHAR2(100);
    ENAME_TABLE ENAME_T:=ENAME_T();
    C NUMBER:=0;
    ERRORS NUMBER;
BEGIN
    FOR I IN (
        SELECT *
        FROM ENAME
    ) LOOP
        C:=C+1;
        ENAME_TABLE.EXTEND;
        ENAME_TABLE (C):=I.FIRST_NAME;
    END LOOP;

    FORALL I IN ENAME_TABLE.FIRST.. ENAME_TABLE.LAST
        SAVE EXCEPTIONS
        UPDATE ENAME
        SET FIRST_NAME=FIRST_NAME|L' to be added:)' --14 char
        WHERE FIRST_NAME=ENAME_TABLE(I);
EXCEPTION
    WHEN OTHERS THEN
        ERRORS:= SQLSBULK_EXCEPTIONS.COUNT;
        DBMS_OUTPUT.PUT_LINE ('The total number of errors occured are ' || ERRORS);
        FOR J IN 1..ERRORS LOOP
            DBMS_OUTPUT.PUT_LINE ('The error iteration is' || SQL%BULK_EXCEPTIONS(J).ERROR_INDEX ||'and the error code is' || SQL%BULK_EXCEPTIONS(J).ERROR_CODE
            ||'and the error message is ' || SQLERRM ( SQLSOULK_EXCEPTIONS(J).ERROR_CODE) );
        END LOOP;
END;
 --==============================================
DECLARE TYPE ENAME T IS TABLE OF VARCHAR2(100);
ENAME_TABLE ENAME_T:=ENAME_T();
C NUMBER:=0;
ERRORS NUMBER;
BEGIN
        SELECT FIRST_NAME BULK COLLECT INTO ENAME_TABLE
        FROM ENAME;
        FORALL I IN ENAME_TABLE.FIRST.. ENAME_TABLE.LAST SAVE EXCEPTIONS UPDATE ENAME SET FIRST_NAME=FIRST_NAME ||' to be added:)' --14 char
END;
 --==============================================
DECLARE
    TYPE EMP_T IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
    EMP_TABLE EMP_T;
BEGIN
    SELECT FIRST_NAME BULK COLLECT INTO EMP_TABLE
    FROM ENAME2;
    LOOP
        FOR I IN EMP TABLE.FIRST..EMP_TABLE.LAST DBMS_OUTPUT.PUT_LINE (EMP_TABLE(I));
    END LOOP;
END;
 --==============================================
DECLARE
    TYPE EMP_T IS TABLE OF VARCHAR2 (100) INDEX BY BINARY_INTEGER;
    EMP_TABLE EMP_T;
    C NUMBER:=0;
BEGIN
    FOR IN (
        SELECT EMPLOYEE_ID, FIRST_NAME
        FROM ENAME2
    ) LOOP
        C:=C+L;
        EMP_TABLE(C):=I.FIRST_NAME;
    END LOOP;

    FOR I IN EMP_TABLE.FIRST..EMP_TABLE.LAST LOOP
        DBMS_OUTPUT.PUT_LINE(EMP_TABLE(I));
    END LOOP;
END;
 --==============================================
 --using bulk colelct in cursor
 --without bulk
DECLARE
    TYPE EMP_T IS TABLE OF EMPLOYEES&ROWTYPE;
    EMP_TABLE   EMP_T;
    CURSOR EMP_C IS
    SELECT *
    FROM EMPLOYEES;
    DBMS_OUTPUT .PUT_LINE (EMP_TABLE(C).FIRST_NAME);
    C NUMBER:=0;
BEGIN
    EMP_TABLE: EMP_T();
    OPEN EMP_C;
    LOOP
        EMP_TABLE.EXTEND;
        C:=C+1;
        FETCH EMP C INTO EMP_TABLE(C);
        EXIT WHEN EMP_C&NOTFOUND;
    END LOOP;

    CLOSE EMP_CI;
END;
 --==============================================
DECLARE
    TYPE EMPT IS TABLE OF EMPLOYEES&ROWTYPE: EMP_TABLE EMP_T;
    CURSOR EMP_C IS
    SELECT *
    FROM EMPLOYEES;
BEGIN
    OPEN EMP_C;
    FETCH EMP C BULK COLLECT INTO EMP_TABLE;
    FOR I IN EMP_TABLE.FIRST..EMP_TABLE.LAST LOOP
        DBMS_OUTPUT.PUT_LINE(EMP_TABLE(I).FIRST_NAME);
    END LOOP;
END;
 --==============================================
DECLARE
    TYPE EMP_T IS TABLE OF ENAME TEST&ROWTYPE;
    EMP_TABLE   EMP_T:=EMP_T();
    EMP_NEW_SAL EMP_T:=EMP_T();
BEGIN
    SELECT BULK COLLECT INTO EMP_TABLE
    FROM ENAME_TEST;
    FORALL I IN EMP_TABLE.FIRST..EMP_TABLE.LAST
        UPDATE ENAME TEST
        SET SALARY=SALARY/2
        WHERE EMPLOYEE_ID=EMP_TABLE(I).EMPLOYEE_ID RETURNING EMPLOYEE_ID, SALARY BULK COLLECT INTO EMP_NEW_SAL;
    FOR I IN EMP_NEW_SAL.FIRST..EMP_NEW_SAL.LAST LOOP
        DBMS_OUTPUT.PUT_LINE(EMP_NEW_SAL(I).EMPLOYEE_ID ||' ' ||EMP_NEW_SAL(I).SALARY)
    END LOOP;
END;
 --==============================================
CREATE OR REPLACE PROCEDURE UPDATE_SAL_X ( EMP_ID NUMBER, P_AMOUNT NUMBER ) 
IS V_NEW_SAL NUMBER;
BEGIN
    UPDATE EMPLOYEES
    SET SALARY=SALARY +P_AMPUNT
    WHERE EMPLOYEE_ID=EMP_ID RETURNING SALARY INTO V_NEW_SAL;
    DBMS_OUTPUT.PUT_LINE('the new sal now is ' || V_NEW_SAL);
END;
 --==============================================
DECLARE
    TYPE EMP_TABLE_TYPE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    EMP_TABLE EMP_TABLE_TYPE;
BEGIN
    EMP_TABLE(1):=100;
    EMP_TABLE (2):=101;
    EMP_TABLE (3)=102;
    EMP_TABLE (100)=103 DBMS_OUTPUT.PUT_LINE (EMP_TABLE.FIRST);
    DBMS_OUTPUT.PUT_LINE(EMP_TABLE.LAST);
    FORALL I IN EMP_TABLE.FIRST..EMP_TABLE.LAST
        SAVE EXCEPTIONS
        UPDATE EMPLOYEES
        SET SALARY=SALARY+5
        WHERE EMPLOYEE_ID =EMP_TABLE(I);
    COMMIT;
END;
 --==============================================
DECLARE
    TYPE EMP_TABLE_TYPE IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
    EMP_TABLE EMP_TABLE_TYPE;
BEGIN
    EMP_TABLE (1):=100;
    EMP_TABLE (2):=101;
    EMP_TABLE(3):=102;
    EMP_TABLE (100):=103;
    DBMS_OUTPUT.PUT_LINE (EMP_TABLE.FIRST);
    DBMS_OUTPUT.PUT_LINE (EMP_TABLE.LAST);
    FORALL IF IN INDICES OF EMP_TABLE
        UPDATE EMPLOYEES
        SET  SALARY=SALARY+5
        WHERE EMPLOYEE_ID =EMP_TABLE(I);
    COMMIT;
END;