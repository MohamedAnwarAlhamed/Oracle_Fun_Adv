--LET US FIRST DO STATMENT LEVEL TRIGGER
CREATE OR REPLACE TRIGGER 
    DEPT_CHECK_TIME BEFORE
    INSERT OR UPDATE OR DELETE ON DEPARTMENTS
BEGIN
    IF TO_NUMBER ( TO_CHAR(SYSDATE, 'hh24') ) NOT BETWEEN 8 AND 16 THEN
        RAISE_APPLICATION_ERROR( -20010, 'DML operations not allowed now' );
    END IF;
END;
 --try to test the trigger
DELETE FROM DEPARTMENTS;

DELETE FROM DEPARTMENTS
WHERE DEPARTMENT_ID=-4;
 --==============================================
CREATE OR REPLACE TRIGGER DEPT_CHECK_TIME 
BEFORE INSERT OR UPDATE OR DELETE ON DEPARTMENTS 
BEGIN 
    IF TO_NUMBER(TO_CHAR(SYSDATE, 'hh24')) NOT BETWEEN 8 AND 16 THEN 
        IF INSERTING THEN RAISE_APPLICATION_ERROR(-20010,'Insert operations not allowed now');
        ELSIF DELETING THEN
            RAISE_APPLICATION_ERROR(-20011, 'Delete operations not allowed now');
        ELSIF UPDATING THEN
            RAISE_APPLICATION_ERROR(-20012, 'Update operations not allowed now');
        END IF;
    END IF;
END;
 --==============================================
CREATE OR REPLACE TRIGGER CHECK_SAL 
BEFORE INSERT OR UPDATE OF SALARY 
ON EMP COPY I FOR EACH ROW 
BEGIN 
    IF NEW.SALARY<500 THEN RAISE_APPLICATION_ERROR(-20030,'min sal is 500');
    END IF;
END;
 --==============================================
CREATE OR REPLACE TRIGGER CHECK_SAL 
BEFORE INSERT OR UPDATE OF SALARY 
ON EMP_COPY REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW 
BEGIN 
    IF NEW.SALARY<500 THEN DBMS_OUTPUT.PUT_LINE('s');
END IF;
END;
 --==============================================
CREATE OR REPLACE TRIGGER EMP_COPY_SAL_AUDIT 
AFTER INSERT OR UPDATE OF SALARY 
OR DELETE ON EMP_COPY FOR EACH ROW 
BEGIN 
    IF INSERTING THEN INSERT INTO EMP_SAL_AUDIT (EMP_ID, OPERATION, OLD_SAL, NEW_SAL, OP_DATE, BY_USER)
    VALUES (:NEW.EMPLOYEE_ID, 'Inserting', NULL, NEW.SALARY, SYSDATE, USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO EMP_SAL_AUDIT (EMP_ID, OPERATION, OLD_SAL, NEW_SAL, OP_DATE, BY_USER)
        VALUES(:OLD.EMPLOYEE_ID, 'updating', :OLD.SALARY, NEW.SALARY, SYSDATE, USER);
    END IF;

    IF DELETING THEN
        INSERT INTO EMP_SAL_AUDIT (EMP_ID,OPERATION, OLD_SAL, NEW_SAL, OP_DATE, BY_USER)
        VALUES(:OLD.EMPLOYEE_ID, 'deleting', : OLD.SALARY, NULL, SYSDATE, USER);
    END IF;
END;
 --==============================================
 --to compile trigger
 --ALTER TRIGGER AFTER_INSERT_EACH_ROW COMPILE;
 --to disable all triggers on a table
 --ALTER TABLE TEST_EMP_DISABLE ALL TRIGGERS;
 --to enbale all triggers on a table
 --alter table test_emp enable all triggers;
 --to disable or enable specific trigger
 --ALTER TRIGGER AFTER_INSERT_STAT ENABLE;
 --ALTER TRIGGER AFTER_INSERT_STAT DISABLE;
 --==============================================
CREATE OR REPLACE TRIGGER UPDATE_DEPTS_SUM_SAL 
INSTEAD OF INSERT ON EMP_ALL_V 
BEGIN 
    IF :NEW.DEPARTMENT_ID IS NOT NULL THEN 
    UPDATE DEPTS_SUM_SAL SET SUMSAL=SUMSAL+:NEW.SALARY WHERE DEPARTMENT_ID=:NEW.DEPARTMENT_ID;
END IF;
END;
 --==============================================
CREATE OR REPLACE TRIGGER IT_PROG_RANGE 
BEFORE INSERT OR UPDATE ON EMPLOYEES 
FOR EACH ROW WHEN (NEW.JOB_ID='IT_PROG') DECLARE V_MIN_IT_PROG NUMBER;
V_MAX IT PROG NUMBER;
BEGIN
    SELECT MIN (SALARY), MAX(SALARY) INTO V_MIN_IT_PROG, V_MAX_IT_PROG
    FROM EMPLOYEES
    WHERE JOB_ID=:NEW.JOB_ID;
    IF NEW.SALARY NOT BETWEEN V_MIN_IT_PROG AND V_MAX_IT_PROG THEN
        RAISE_APPLICATION_ERROR (-20300, 'invalid range');
    END IF;
END;
 --==============================================
CREATE OR REPLACE TRIGGER IT_PROG_RANGE 
FOR INSERT OR UPDATE ON EMPLOYEES WHEN (NEW.JOB_ID='IT_PROG') COMPOUND TRIGGER V_MIN_IT_PROG NUMBER;
V_MAX_IT_PROG NUMBER;
BEFORE STATEMENT IS
BEGIN
    SELECT MIN (SALARY), MAX (SALARY) INTO V_MIN_IT_PROG, V_MAX_IT_PROG
    FROM EMPLOYEES
    WHERE JOB_ID='IT_PROG';
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
    WHEN (NEW.JOB_ID='IT_PROG') COMPOUND TRIGGER V_MIN_IT_PROG NUMBER;
    V_MAX_IT_PROG NUMBER;
    BEFORE STATEMENT IS
    BEGIN
        SELECT  MIN (SALARY), MAX (SALARY) INTO V_MIN_IT_PROG, V_MAX_IT_PROG
        FROM EMPLOYEES
        WHERE JOB_ID='IT_PROG';
    END;

    BEFORE STATEMENT;
    BEFORE EACH ROW IS
    BEGIN IF NEW.SALARY NOT BETWEEN V_MIN_IT_PROG AND V_MAX_IT_PROG THEN
            RAISE_APPLICATION_ERROR (-20300, 'invalid range');
        END IF;
    END BEFORE EACH ROW;
END;
 --==============================================
 --before creating the trigger lets try create the array
DECLARE
    TYPE JOB_T IS RECORD (
        MINSAL NUMBER,
        MAXSAL NUMBER
    );
    TYPE EMP_T IS TABLE OF JOB_T INDEX BY VARCHAR2(100);
    EMP EMP_T;
BEGIN
    FOR I IN ( 
    SELECT JOB_ID, MIN(SALARY) MIN_SAL, MAX(SALARY) MAX_SAL
        FROM  EMPLOYEES
        GROUP BY JOB_ID
        ORDER BY 1
    ) LOOP
        EMP(I.JOB_ID).MINSAL:=I.MIN_SAL;
        EMP(I.JOB_ID).MAXSAL:=I.MAX_SAL;
    END LOOP;

    FOR I IN (
        SELECT DISTINCT JOB_ID
        FROM EMPLOYEES
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(I.JOB_ID ||' ' ||EMP(I.JOB_ID).MINSAL|| ''||EMP(I.JOB_ID).MAXSAL);
    END LOOP;
END;
 --========
CREATE OR REPLACE TRIGGER SALARY_RANGE 
FOR INSERT OR UPDATE ON EMPLOYEES 
COMPOUND TRIGGER TYPE JOB_T 
IS RECORD (
    MINSAL NUMBER,
    MAXSAL NUMBER
);
TYPE EMP_T IS TABLE OF JOB_T INDEX BY VARCHAR2(100);
EMP EMP_T;
BEFORE STATEMENT IS
BEGIN
    FOR I IN(
        SELECT JOB ID, MIN(SALARY) MIN SAL, MAX(SALARY) MAX_SAL
        FROM EMPLOYEES
        GROUP BY JOB_ID
        ORDER BY 1
    ) LOOP
        EMP(I.JOB_ID).MINSAL:=I.MIN_SAL;
        EMP(I.JOB_ID).MAXSAL:=I.MAX_SAL;
    END LOOP;
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
    IF NEW.SALARY NOT BETWEEN EMP(:NEW.JOB_ID).MINSAL AND EMP(:NEW.JOB_ID).MAXSAL THEN
        RAISE_APPLICATION_ERROR (-20300, 'invalid range');
    END IF;
END BEFORE EACH ROW;
END;
--==============================================
CREATE OR REPLACE TRIGGER BEFORE_CREATE_TRIGGER BEFORE CREATE ON SCHEMA
BEGIN
    IF TO_NUMBER(TO_CHAR(SYSDATE, 'hh24')) NOT BETWEEN 8 AND 16 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Create not Allowed now');
    END IF;
END;
--==============================================
CREATE TABLE DDL LOG (
    OPERATION VARCHAR2(30),
    OBJ_OWNER VARCHAR2 (30),
    OBJECT_NAME VARCHAR2 (30),
    ATTEMPT_BY VARCHAR2 (30),
    ATTEMPT_DT DATE
);

CREATE OR REPLACE TRIGGER BEFORE_CREATE_TRIGGER 
AFTER DDL ON SCHEMA
BEGIN
    INSERT INTO DDL LOG
        SELECT ORA_SYSEVENT, ORA_DICT_OBJ_OWNER, ORA_DICT_OBJ_NAME, USER, SYSDATE
        FROM DUAL;
END;
--==============================================
CREATE OR REPLACE TRIGGER LOGON_T 
AFTER LOGON ON DATABASE
BEGIN
    INSERT INTO LOG_TABLE VALUES ( USER, SYSDATE, 'logon');
END;

CREATE OR REPLACE TRIGGER 
LOGOFF T BEFORE LOGOFF ON DATABASE
BEGIN
    INSERT INTO LOG_TABLE VALUES ( USER, SYSDATE, 'logoff' );
END;